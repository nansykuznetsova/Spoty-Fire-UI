import autoprefixer from 'autoprefixer';
import { babel } from '@rollup/plugin-babel';
import postcss from 'rollup-plugin-postcss';
import rename from 'rollup-plugin-rename';
import { nodeResolve } from '@rollup/plugin-node-resolve';
import { terser } from 'rollup-plugin-terser';

import pkg from './package.json';

export default [
  {
    preserveModules: true,
    input: './src/index.js',
    output: [
      {
        dir: './dist',
        format: 'es',
      }
    ],
    external: [
      /@babel\/runtime/,
      /style-inject/,
      ...Object.keys(pkg.peerDependencies || {}),
      ...Object.keys(pkg.devDependencies || {}),
    ],
    plugins: [
      nodeResolve({
        extensions: ['.js',  '.jsx', '.css']
      }),
      postcss({
        modules: true,
        plugins: [autoprefixer()],
        minimize: true
      }),
      {
        name: 'Fix style-inject import plugin',
        generateBundle: (options, bundle) => {
          Object.entries(bundle).forEach(entry => {
            // early return if the file we're currently looking at doesn't need to be acted upon by this plugin
            if (!entry[0].match(/.*(.css.js)$/)) {
              return;
            }

            // this line only runs for .scss.js files, which were generated by the postcss plugin.
            // depending on the use-case, the relative path to style-inject might need to change
            bundle[entry[0]].code = entry[1].code.replace(
              '../node_modules/style-inject/dist/style-inject.es.js',
              'style-inject',
            );
          });
        },
      },
      babel({
        babelHelpers: 'runtime',
        exclude: 'node_modules/**',
      }),
      terser(), // minifies generated bundles
      rename({
        include: 'src/index.js',
        map: (name) => name.replace('src', '.'),
      }),
      rename({
        include: ['**/*.js', '**/*.jsx', '**/*.css'],
        map: (name) => name.replace('src/components', 'components'),
      }),
      rename({
        include: 'src/svg/**/*.jsx',
        map: (name) => name.replace('src/svg', 'svg'),
      })
    ]
  }
];